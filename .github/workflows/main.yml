name: lint-build-push-all-images

on:
  - pull_request
  - push

jobs:
  hadolint:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        image-name: [ jdk, jdk-docker, kubectl, vault-kubectl, vault-kubectl-helm, vault-kubectl-terraform, mysql-to-postgres-mirror, node-chromium, python-otcextension ]
        include:
          - image-name: jdk
            dockerfile-path: jdk/Dockerfile
          - image-name: jdk-docker
            dockerfile-path: jdk/jdk-docker/Dockerfile
          - image-name: kubectl
            dockerfile-path: kubectl/Dockerfile
          - image-name: vault-kubectl
            dockerfile-path: kubectl/vault-kubectl/Dockerfile
          - image-name: vault-kubectl-helm
            dockerfile-path: kubectl/vault-kubectl/vault-kubectl-helm/Dockerfile
          - image-name: vault-kubectl-terraform
            dockerfile-path: kubectl/vault-kubectl/vault-kubectl-helm/vault-kubectl-terraform/Dockerfile
          - image-name: mysql-to-postgres-mirror
            dockerfile-path: kubectl/vault-kubectl/vault-kubectl-helm/mysql-to-postgres-mirror/Dockerfile
          - image-name: node-chromium
            dockerfile-path: node-chromium/Dockerfile
          - image-name: python-otcextension
            dockerfile-path: python-otcextension/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: ${{ matrix.dockerfile-path }}
          failure-threshold	: ignore

  build-scan-push:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        image-name: [ jdk, jdk-docker, kubectl, vault-kubectl, vault-kubectl-helm, vault-kubectl-terraform, mysql-to-postgres-mirror, node-chromium, python-otcextension ]
        include:
          - image-name: jdk
            image-version: jdk-11-alpine-limited-user
            dockerfile-path: jdk
          - image-name: jdk-docker
            image-version: jdk-11-docker-limited-user
            dockerfile-path: jdk/jdk-docker
          - image-name: kubectl
            image-version: 1.17.17-limited-user
            dockerfile-path: kubectl
          - image-name: vault-kubectl
            image-version: 1.3.3-limited-user
            dockerfile-path: kubectl/vault-kubectl
          - image-name: vault-kubectl-helm
            image-version: 3.2.1-openapifix-stablerepofix-limited-user
            dockerfile-path: kubectl/vault-kubectl/vault-kubectl-helm
          - image-name: vault-kubectl-terraform
            image-version: 1.1.4-limited-user
            dockerfile-path: kubectl/vault-kubectl/vault-kubectl-helm/vault-kubectl-terraform
          - image-name: mysql-to-postgres-mirror
            image-version: 5.5.0-kubectl-port-forwarding-limited-user
            dockerfile-path: kubectl/vault-kubectl/vault-kubectl-helm/mysql-to-postgres-mirror
          - image-name: node-chromium
            image-version: 14.17.6-limited-user
            dockerfile-path: node-chromium
          - image-name: python-otcextension
            image-version: 0.26.0-limited-user
            dockerfile-path: python-otcextension
    needs: hadolint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: |
          cd ${{ matrix.dockerfile-path }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image-name }}:${{ matrix.image-version }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{secrets.DOCKERHUB_USERNAME}}/${{matrix.image-name}}:${{matrix.image-version}}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}
      - name: Build and push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.image-name }}:${{ matrix.image-version }}